#+STARTUP: overview

* Global tweaks
#+BEGIN_SRC emacs-lisp
;; Copy/Paste they way I am used to
(global-unset-key (kbd "C-c c"))
(global-set-key (kbd "C-c c") 'kill-ring-save)

;; Paste the way I am used to
(global-unset-key (kbd "C-v"))
(global-set-key (kbd "C-v") 'yank)

;; Map F6 to describe-key
(global-unset-key (kbd "<f6>"))
(global-set-key (kbd "<f6>") 'describe-key)

;; Move mode line to top
(setq-default header-line-format mode-line-format)
;; Hide the bottom mode line
(setq-default mode-line-format nil)

;; display full screen
(global-unset-key (kbd "C-M-+"))
(global-set-key (kbd "C-M-+") 'toggle-frame-maximized)

;; Show corresponding paren
(show-paren-mode 1)

;; Don't wrap lines
(setq-default truncate-lines t)

;; keyboard scroll one line at a time
(setq scroll-step 1)

;; suppress splash screen
(setq inhibit-startup-message t)

;; disable scrollbar, menu bar and tool bar
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)

;; turn off blinking cursor
(blink-cursor-mode -1)

;; turn off the annoying beep
(setq visible-bell nil)

;; turn off line wrapping
(set-default 'truncate-lines t)

;; y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Mac specific
#+BEGIN_SRC emacs-lisp
;; make command a meta key on Macs
(when (eq system-type 'darwin)
  (setq mac-command-modifier 'meta)
  )
#+END_SRC

* Window related
#+BEGIN_SRC emacs-lisp
;; Kill current window
(global-unset-key (kbd "M-<end>"))
(global-set-key (kbd "M-<end>") 'delete-window)

;; Got to other window after horizontal/vertial split
(global-unset-key (kbd "\C-x2"))
(global-set-key "\C-x2"
		(lambda ()
		  (interactive)
		  (split-window-vertically)
		  (other-window 1)))

(global-unset-key (kbd "\C-x3"))
(global-set-key "\C-x3" (lambda ()
			  (interactive)
			  (split-window-horizontally)
			  (other-window 1)))
#+END_SRC
;  (use-package swiper
;  :ensure t
;  :bind (("C-s" . swiper)
;	 ("C-r" . swiper)
;	 ("C-c C-r" . ivy-resume)
;	 ("M-x" . counsel-M-x)
;	 ("C-x C-f" . counsel-find-file))
;  :config
;  (progn
;    (ivy-mode 1)
;    (setq ivy-use-virtual-buffers t)
;    (setq ivy-display-style 'fancy)
;    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
;    ))

* Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:config
(progn
  ;; List Buffers
  (global-unset-key (kbd "C-S-b"))
  (global-set-key (kbd "C-S-b") 'helm-buffers-list)

  ;; meta-X is handled by Helm
  (global-unset-key (kbd "M-x"))
  (global-set-key (kbd "M-x") 'helm-M-x)

  ;; Map F1 to helm-imenu
  (global-unset-key (kbd "<f1>"))
  (global-set-key (kbd "<f1>") 'helm-imenu)

  (setq helm-full-frame                       t ; make helm alway open in a full frame
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-mode-reverse-history           nil ; place helm command history on top
      ))
)
#+END_SRC

* Whole-line-or-region
#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
:ensure t
:config
(progn
  ;; Kill selection or line (in case nothing is selected)
  (global-unset-key (kbd "C-w"))
  (global-set-key (kbd "C-w") 'whole-line-or-region-kill-region)
))
#+END_SRC

# 'ace-jump-mode
# 'auto-complete-c-headers
# 'expand-region
# 'ensime
# 'helm
# 'helm-projectile
# 'helm-swoop
# 'hl-anything
# 'move-text
# 'paredit
# 'projectile
# 'rtags
# 'rtags-ac
# 'yasnippet
# 'zoom-window
