#+STARTUP: overview

* Global settings
#+BEGIN_SRC emacs-lisp
;; Copy/Paste they way I am used to
(global-unset-key (kbd "C-c c"))
(global-set-key (kbd "C-c c") 'kill-ring-save)

;; Paste the way I am used to
(global-unset-key (kbd "C-v"))
(global-set-key (kbd "C-v") 'yank)

;; Map F6 to describe-key
(global-unset-key (kbd "<f6>"))
(global-set-key (kbd "<f6>") 'describe-key)

;; Move mode line to top
(setq-default header-line-format mode-line-format)
;; Hide the bottom mode line
(setq-default mode-line-format nil)

;; display full screen
(global-unset-key (kbd "C-M-+"))
(global-set-key (kbd "C-M-+") 'toggle-frame-maximized)

;; Show corresponding paren
(show-paren-mode 1)

;; Don't wrap lines
(setq-default truncate-lines t)

;; keyboard scroll one line at a time
(setq scroll-step 1)

;; suppress splash screen
(setq inhibit-startup-message t)

;; disable scrollbar, menu bar and tool bar
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)

;; turn off blinking cursor
(blink-cursor-mode -1)

;; turn off the annoying beep
(setq visible-bell nil)

;; turn off line wrapping
(set-default 'truncate-lines t)

;; y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;; Kill current buffer
(global-unset-key (kbd "C-<end>"))
(global-set-key (kbd "C-<end>") 'kill-this-buffer)

;; Select vertical region
(global-unset-key (kbd "C-M-<down>"))
(global-set-key (kbd "C-M-<down>") 'rectangle-mark-mode)

;; Enable deleting of selected text by subsequent input
(delete-selection-mode 1)

;; Run shell mode
(global-unset-key (kbd "C-S-m"))
(global-set-key (kbd "C-S-m") 'shell)

;; Display shell buffer in the current window
(add-to-list 'display-buffer-alist
      '("^\\*shell\\*$" . (display-buffer-same-window)))
#+END_SRC

* Mac specific
#+BEGIN_SRC emacs-lisp
;; make command a meta key on Macs
(when (eq system-type 'darwin)
  (setq mac-command-modifier 'meta)
  )
#+END_SRC

* Window related
#+BEGIN_SRC emacs-lisp
;; Kill current window
(global-unset-key (kbd "M-<end>"))
(global-set-key (kbd "M-<end>") 'delete-window)

;; Got to other window after horizontal/vertial split
(global-unset-key (kbd "\C-x2"))
(global-set-key "\C-x2"
		(lambda ()
		  (interactive)
		  (split-window-vertically)
		  (other-window 1)))

(global-unset-key (kbd "\C-x3"))
(global-set-key "\C-x3" (lambda ()
			  (interactive)
			  (split-window-horizontally)
			  (other-window 1)))

;; Window movements
(global-unset-key (kbd "M-l"))
(global-unset-key (kbd "M-<right>"))
(global-set-key (kbd "M-l") 'windmove-right)
(global-set-key (kbd "M-<right>") 'windmove-right)

(global-unset-key (kbd "M-h"))
(global-unset-key (kbd "M-<left>"))
(global-set-key (kbd "M-h") 'windmove-left)
(global-set-key (kbd "M-<left>") 'windmove-left)

(global-unset-key (kbd "M-k"))
(global-unset-key (kbd "M-<up>"))
(global-set-key (kbd "M-k") 'windmove-up)
(global-set-key (kbd "M-<up>") 'windmove-up)

(global-unset-key (kbd "M-j"))
(global-unset-key (kbd "M-<down>"))
(global-set-key (kbd "M-j") 'windmove-down)
(global-set-key (kbd "M-<down>") 'windmove-down)
#+END_SRC
* Modes
** Minor mode hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'rectangle-mark-mode-hook (lambda() (define-key rectangle-mark-mode-map (kbd "C-w") 'delete-rectangle)) )
(add-hook 'shell-mode-hook (lambda() (set-process-query-on-exit-flag (get-process "shell") nil)) )
#+END_SRC
** Expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
:ensure t
:bind (("C-=" . er/expand-region))
)
#+END_SRC


:bind (("C-x g" . magit-status))
** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:config
(progn
  ;; List Buffers
  (global-unset-key (kbd "C-S-b"))
  (global-set-key (kbd "C-S-b") 'helm-buffers-list)

  ;; meta-X is handled by Helm
  (global-unset-key (kbd "M-x"))
  (global-set-key (kbd "M-x") 'helm-M-x)

  ;; Map F1 to helm-imenu
  (global-unset-key (kbd "<f1>"))
  (global-set-key (kbd "<f1>") 'helm-imenu)

  ;; Helm swoop
  (global-unset-key (kbd "M-i"))
  (global-set-key (kbd "M-i") 'helm-occur)

  (setq helm-full-frame                       t ; make helm alway open in a full frame
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-mode-reverse-history           nil ; place helm command history on top
      ))
)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
:bind (("C-x g" . magit-status))
)
#+END_SRC
** Move-text
#+BEGIN_SRC emacs-lisp
(use-package move-text
:ensure t
:config
(progn
  ;; Text movement
  (global-unset-key (kbd "C-S-<up>"))
  (global-set-key (kbd "C-S-<up>") 'move-text-up)
  (global-unset-key (kbd "C-S-<down>"))
  (global-set-key (kbd "C-S-<down>") 'move-text-down)
))
#+END_SRC

** Whole-line-or-region
#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
:ensure t
:config
(progn
  ;; Kill selection or line (in case nothing is selected)
  (global-unset-key (kbd "C-w"))
  (global-set-key (kbd "C-w") 'whole-line-or-region-kill-region)
))
#+END_SRC

** Zoom-window
#+BEGIN_SRC emacs-lisp
(use-package zoom-window
:ensure t
:config
(progn
  ;; Zoom-in/Zoom-out
  (global-unset-key (kbd "C-M-z"))
  (global-set-key (kbd "C-M-z") 'zoom-window-zoom)
))
#+END_SRC

# 'ace-jump-mode
# 'auto-complete-c-headers
# 'expand-region
# 'ensime
# 'helm-projectile
# 'hl-anything
# 'paredit
# 'projectile
# 'rtags
# 'rtags-ac
   # 'yasnippet
